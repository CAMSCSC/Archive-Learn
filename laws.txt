Any given program, when running, is obsolete.
Any given program costs more and takes longer each time it is run.
If a program is useful, it will have to be changed.
If a program is useless, it will have to be documented.
Any given program will expand to fill all the available memory.
The value of a program is inversely proportional to the weight of its output.
Program complexity grows until it exceeds the capability of the programmer who must maintain it.
Every non trivial program has at least one bug
Corollary 1 - A sufficient condition for program triviality is that it have no bugs.
Corollary 2 - At least one bug will be observed after the author leaves the organization.
Bugs will appear in one part of a working program when another 'unrelated' part is modified.
The subtlest bugs cause the greatest damage and problems.
Corollary - A subtle bug will modify storage thereby masquerading as some other problem.
Lulled into Security Law
A 'debugged' program that crashes will wipe out source files on storage devices when there is the least available backup.
A hardware failure will cause system software to crash, and the customer engineer will blame the programmer.
A system software crash will cause hardware to act strangely and the programmers will blame the customer engineer.
Undetectable errors are infinite in variety, in contrast to detectable errors, which by definition are limited.
Adding manpower to a late software project makes it later.
Make it possible for programmers to write programs in English, and you will find that programmers can not write in English.
The documented interfaces between standard software modules will have undocumented quirks.
The probability of a hardware failure disappearing is inversely proportional to the distance between the computer and the customer engineer.
A working program is one that has only unobserved bugs.
No matter how many resources you have, it is never enough.
Any cool program always requires more memory than you have.
When you finally buy enough memory, you will not have enough disk space.
Disks are always full. It is futile to try to get more disk space. Data expands to fill any void.
If a program actually fits in memory and has enough disk space, it is guaranteed to crash.
If such a program has not crashed yet, it is waiting for a critical moment before it crashes.
No matter how good of a deal you get on computer components, the price will always drop immediately after the purchase.
All components become obsolete.
The speed with which components become obsolete is directly proportional to the price of the component.
Software bugs are impossible to detect by anybody except the end user.
The maintenance engineer will never have seen a model quite like yours before.
It is axiomatic that any spares required will have just been discontinued and will be no longer in stock.
Any VDU, from the cheapest to the most expensive, will protect a twenty cent fuse by blowing first.
Any manufacturer making his warranties dependent upon the device being earthed will only supply power cabling with two wires.
If a circuit requires n components, then there will be only n - 1 components in locally-held stocks.
A failure in a device will never appear until it has passed final inspection.
Adding manpower to a late software project makes it later.
A program generator creates programs that are more buggy than the program generator.
Law of Inconvenient Malfunction: A device will fail at the least opportune possible moment.
Law of Cable Compatibility: If you choose a cable and a connector at random, the probability that they are compatible is equal to zero.
Law of Hardware Compatibility: The probability of a given peripheral being compatible with a PC is inversely proportional to the immediate need for that peripheral.
Law of Bad Sectors: The probability that an untested diskette will have bad sectors is directly proportional to the importance of the data written onto the diskette.
First Law of Selective Gravitation: When an object is dropped, it will fall in such a way as to cause the greatest possible damage to itself and/or other objects on which it lands.
Second Law of Selective Gravitation: The tendency for an object to be dropped is directly proportional to its value.
Law of Reality Change: Unalterable hardware specifications will change as necessary to maximize frustration for personnel affected by said specifications.
Law of Noise: Noise bursts occur so as to cause the most, and/or most serious, errors in data communications, regardless of the actual amount of noise present.
Law of Expectation: Consumer expectations always outpace advances in hardware technology.
Law of the Titanic: If a device cannot malfunction, it will.
Law of Debugging: The difficulty of debugging software is directly proportional to the number of people who will ultimately use it.
Law of Neurosis: The chances of software being neurotic (developing bugs spontaneously without apparent reason) is directly proportional to the confusion such neurosis can cause.
Law of Available Space: If there are n bytes in a crucial software program, the available space for its convenient storage or loading is equal to n-1 bytes.
First Law of Bad Sectors: The probability of software being mutilated by bad sectors is directly proportional to the value and/or importance of the programs.
Second Law of Bad Sectors: When a program is mutilated by bad sectors, the damage will occur at the point(s) that result in the most frequent and/or severe errors when the program is run.
Law of Noise: When a downloaded program is corrupted by noise, the corruption will occur at the point(s) that result in the most frequent and/or severe errors when the program is run.
Law of Software Compatibility: If two programs are chosen at random, the probability that they are compatible is equal to zero.
Law of Option Preferences: When two people share a computer, their software option preferences will differ in every possible way.
Law of Expectation: Consumer expectations always outpace advances in software technology.
Law of the Titanic: Bug-free software isn't.
Most computer errors can be attributed to a similar problem - a screw loose behind the keyboard.
Whenever you need a crucial file from the server, the network will be down.
Whenever you need a crucial file from your hard drive, your computer will crash.
E-mailed tasking will always come just before you log off.
A quarantined virus - will be opened.
A chain letter - will be sent.  To global.  A dozen times.
The chance of a virus infecting your network is directly proportional to the amount of damage it does.
The chances of getting off work on time is inversely proportional to how much e-mail the boss leaves for until end of the day.
The faster you need a hard-copy, the more people will be using the only office printer.
General Fault Errors are the "Check Engine" light of computers. If it can be fixed, chances are it's not by you.
A patch is a piece of software which replaces old bugs with new bugs.
The chances of a program doing what it's supposed to do is inversely proportional to the number of lines of code used to write it.
If you forget to save your work every 5 minutes, it will break down after you've been at it for an hour.
The most ominous words for those using computers:  "Daddy, what does 'Now formatting Drive C mean'?"
When putting something into memory, always remember where you put it.
Every non-trivial program contains at least one bug.
An expert is someone brought in at the last minute to share the blame.
Debugging is at least twice as hard as writing the program in the first place
Bahaman's Law: for any given software, the moment you manage to master it, a new version appears.
Most computer errors can be attributed to a similar problem - a screw loose behind the keyboard.
Whenever you need a crucial file from the server, the network will be down.
Whenever you need a crucial file from your hard drive, your computer will crash.
E-mailed tasking will always come just before you log off.
A quarantined virus - will be opened.
A chain letter - will be sent.  To global.  A dozen times.
The chance of a virus infecting your network is directly proportional to the amount of damage it does.
The chances of getting off work on time is inversely proportional to how much e-mail the boss leaves for until end of the day.
The faster you need a hard-copy, the more people will be using the only office printer.
General Fault Errors are the "Check Engine" light of computers. If it can be fixed, chances are it's not by you.
A patch is a piece of software which replaces old bugs with new bugs.
The chances of a program doing what it's supposed to do is inversely proportional to the number of lines of code used to write it.
The longer it takes to download a program the more likely it won't run.
Failure is not an option, it's included with the software.
A program is good when it's bug free - which is impossible.
It's not a bug, it's an undocumented feature.
An employee rank is in inverse proportion to his use of a computer, and in proportion to its performance.
If a project is completed on schedule, it wasn't debugged properly.
Non Crash Operating System aren't.
The worst bugs in your program will show up only during the final review.
Format C: fixes all
Law of Computer Generated Aerodynamics: Computers suck.
Law of Recycling: A computer that has been on the market for 6 weeks is still usable as a boat anchor.
Law of Anti-security: The best way past a pesky security feature is a 13-year-old.
Law of Acceleration: A computer that has surpassed its user's frustration capacity (FC) will accelerate downwards at 9.8 meters per second squared.
Computers let you waste time efficiently.
Make a system even a moron can use and a moron will use it.
Make one that requires training or intelligence and only a moron will use it, but there will be more help desk calls.
The likelihood of problems occurring is inversely proportional to the amount of time remaining before the deadline.
You will always discover errors in your work after you have printed/submitted it.
90% of a programmer errors come from data from other programmers.
'Illegal Error' messages only happen when you forget to save your work
If you make the letters in your Word document bigger and then you print it out, you'll have everything on the first page and only one line on the second.
By the time you learn your new computer you'll need a new one.
The longer the e-mail, the greater the chance it will not make it to its destination, for whatever reason
If you were preventive enough to save a copy of anything, you will not need it. Therefore - Not saving a copy of anything is directly proportional to the value of the information lost and the amount of time invested in gathering and typing it
Proof-read all e-mails three or four times before sending it. All errors are detected immediately after being sent.